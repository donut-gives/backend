name: Build and Deploy to GKE

on:
  push:
    branches:
      - staging

env:
  PROJECT_ID: ${{vars.GCP_PROJECT_ID }}
  GKE_CLUSTER: donut-asia-cluster
  GKE_ZONE: asia-south1
  DEPLOYMENT_NAME: donutserver
  IMAGE: donutserver

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GCP_SERVICE_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GCP_SERVICE_KEY }}
        
    # Adding config
    - run: |
          cat > config.yml << EOF
          app:
            name: "Donut Backend"
            version: "0.0.1"
            desc: "Shaping new gen change makers"
          db:
            url: "${{ secrets.DB_STAGING_URL }}"
            name: "${{ secrets.DB_STAGING_NAME }}"
          auth:
            jwt_secret: "${{ secrets.JWT_SECRET_STAGING }}"
            google:
              client_id: "${{ secrets.GOOGLE_OAUTH_CLIENT_ID_STAGING }}"
              client_secret: "${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET_STAGING }}"
          emailer:
            email: "${{ secrets.GMAIL_STAGING }}"
            apppassword: "${{ secrets.GMAIL_APP_PASSWORD_STAGING }}"
          cloud:
            userbucket : "${{ secrets.GCLOUD_BUCKET_STAGING }}"
          captcha:
            secret: "${{ secrets.RECAPTCHA_SITE_SECRET_STAGING }}"
          EOF

    - run: |
          cat > .env << EOF
          PORT=3100
          GIN_MODE="debug"
          EOF

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "asia.gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "asia.gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        ./kustomize edit set image asia.gcr.io/PROJECT_ID/IMAGE:TAG=asia.gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
